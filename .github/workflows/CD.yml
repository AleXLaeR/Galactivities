name: Docker-based app CI / CD pipeline
on:
  push:
    branches: [master]
  pull_request:
    types: [closed]
  workflow_dispatch:
env:
  FRONT_FOLDER: ./client-app
  DOCKERFILE_PATH: Dockerfile.prod
  
  PROD_BUILD_ART: dist-prod
  PROD_BUILD_FOLDER: API/wwwroot

  SARIF_REPORT_NAME: results-report
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/galactivities
jobs:
  build-prod:
    # if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: false
      - uses: ./.github/actions/cache-deps
        with:
          install-path: ${{ env.FRONT_FOLDER }}
      - name: Build prod build
        shell: bash
        env:
          NODE_ENV: production
          # BUILD_FOLDER: '../${{ env.PROD_BUILD_FOLDER }}'
        run: |
          cd ${{ env.FRONT_FOLDER }}
          npm run build
      - if: failure()
        shell: bash
        run: |
          npm config list
          cd ${{ env.PROD_BUILD_FOLDER }}
          echo "---"
          ls -la
      - uses: actions/upload-artifact@v3
        with:
          path: ${{ env.PROD_BUILD_FOLDER }}
          name: ${{ env.PROD_BUILD_ART }}
          if-no-files-found: error
  sca:
    runs-on: ubuntu-latest
    name: Run SCA scan
    env:
      SARIF_NAME: snyk-report
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Run Snyk 3rd-party vulnerability check
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ${{ env.FRONT_FOLDER }}
        run: npx snyk test --severity-threshold=high --sarif-file-output='../${{ env.SARIF_NAME }}.sarif'
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ env.SARIF_NAME }}.sarif
  report:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something is wrong"
          echo "${{ github.workflow_sha }}"
  build-tag-push:
    runs-on: ubuntu-latest
    needs: [build-prod]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
        with:
          platforms: 'amd64,arm64'
      - uses: docker/setup-buildx-action@v2
      - name: Assign image meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.PROD_BUILD_ART }}
          path: ${{ env.PROD_BUILD_FOLDER }}
      - if: failure()
        shell: bash
        run: |
          cwd -P
          ls -la  
      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: 'linux/amd64,linux/arm64'
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
  sca-trivy:
    name: Perform SCA container scan via Trivy
    runs-on: ubuntu-latest
    needs: [build-tag-push]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:latest'
          exit-code: 1
          severity: HIGH,CRITICAL
          vuln-type: os,library
          format: sarif
          output: ${{ env.SARIF_REPORT_NAME }}.sarif
      - uses: actions/upload-artifact@v3
        with:
          path: ${{ env.SARIF_REPORT_NAME }}.sarif
          name: sca-report-${{ github.sha }}
          retention-days: 7
  secure-sarif:
    permissions: write-all
    name: Upload SCA scan results to GitHub Security tab
    runs-on: ubuntu-latest
    needs: [sca-trivy]
    if: success()
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: sca-report-${{ github.sha }}
      - run: ls -la
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ env.SARIF_REPORT_NAME }}.sarif
  deploy:
    needs: [build-tag-push]
    name: Deploy application to Fly.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
